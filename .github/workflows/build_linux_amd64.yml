name: Build Binaries

on: [push, pull_request]

env:
    # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
    BUILD_TYPE: Release

jobs:
    build_linux:
        # The CMake configure and build commands are platform agnostic and should work equally
        # well on Windows or Mac.  You can convert this to a matrix build if you need
        # cross-platform coverage.
        # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
        runs-on: ubuntu-20.04

        steps:
        - uses: actions/checkout@v2
        
        - name: Update repositories
          run: sudo apt update 
        
        - name: Install dependencies
          run: sudo apt install libfftw3-dev libglfw3-dev libglew-dev libvolk2-dev libsoapysdr-dev libairspyhf-dev libairspy-dev libiio-dev libad9361-dev librtaudio-dev libhackrf-dev librtlsdr-dev

        - name: Create Build Environment
          # Some projects don't allow in-source building, so create a separate build directory
          # We'll use this as our working directory for all subsequent commands
          run: cmake -E make_directory ${{runner.workspace}}/build

        - name: Configure CMake
          # Use a bash shell so we can use the same syntax for environment variable
          # access regardless of the host operating system
          shell: bash
          working-directory: ${{runner.workspace}}/build
          # Note the current convention is to use the -S and -B options here to specify source 
          # and build directories, but this is only available with CMake 3.13 and higher.  
          # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
          run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE  -DOPT_BUILD_SDRPLAY_SOURCE=OFF

        - name: Build
          working-directory: ${{runner.workspace}}/build
          shell: bash
          # Execute the build.  You can specify a specific target with "--target <NAME>"
          run: cmake --build . --config $BUILD_TYPE

        - name: Create Deb Archive
          run: cd $GITHUB_WORKSPACE && sh make_debian_package.sh ${{runner.workspace}}/build

        - name: Save Deb Archive
          uses: actions/upload-artifact@v2
          with:
              name: sdrpp_debian_amd64
              path: /home/runner/work/SDRPlusPlus/SDRPlusPlus/sdrpp_debian_amd64.deb

    build_windows:
        runs-on: windows-latest

        steps:
        - uses: actions/checkout@v2
        
        - name: Create Build Environment
          run: cmake -E make_directory ${{runner.workspace}}/build

        - name: Download PothosSDR
          run: Invoke-WebRequest -Uri "https://downloads.myriadrf.org/builds/PothosSDR/PothosSDR-2021.02.28-vc16-x64.exe" -OutFile ${{runner.workspace}}/pothos.exe

        - name: Install PothosSDR
          run: mkdir "C:/Program Files/PothosSDR" ; 7z x ${{runner.workspace}}/pothos.exe -o"C:/Program Files/PothosSDR/"

        - name: Install vcpkg dependencies
          run: vcpkg install fftw3:x64-windows glew:x64-windows glfw3:x64-windows

        - name: Install rtaudio
          run: git clone https://github.com/thestk/rtaudio ; cd rtaudio ; mkdir build ; cd build ; cmake .. ; cmake --build . --config Release ; cmake --install .

        - name: Build
          working-directory: ${{runner.workspace}}/build
          run: cmake .. "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" -G "Visual Studio 15 2017 Win64"
